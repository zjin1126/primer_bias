cbind(a, b)
# Ex3
a <- c(1, 5, 4, 3, 6)
b <- c(3, 5, 2, 1, 9)
a <= b
# Ex4
a <- c(10, 2, 4, 15)
b <- c(3, 12, 4, 11)
rbind(a, b)
# Ex5
x <- c(1:12)
dim(x)
length(x)
# Ex6
a <- c(12:5)
is.numeric(a)
# Ex7
x <- c(12:4)
y <- c(0, 1, 2, 0, 1, 2, 0, 1, 2)
which(!is.finite(x/y))
# Ex8
x <- letters[1:10]
y <- letters[15:24]
x < y
x
y
# Ex9
x <- c("blue", "red", "green", "yellow")
is.character(x)
# Ex10
x <- c("blue", 10, "green", 20)
is.character(x)
source("ex1-2.R")
# Ex1
x <- c(4, 6, 5, 7, 10, 9, 4, 15)
y <- c(0, 10, 1, 8, 2, 3, 4, 1)
x * y
# Ex2
a <- c(1, 2, 4, 5, 6)
b <- c(3, 2, 4, 1, 9)
cbind(a, b)
# Ex3
a <- c(1, 5, 4, 3, 6)
b <- c(3, 5, 2, 1, 9)
a <= b
# Ex5
x <- c(1:12)
dim(x)
length(x)
# Ex6
a <- c(12:5)
is.numeric(a)
# Ex7
x <- c(12:4)
y <- c(0, 1, 2, 0, 1, 2, 0, 1, 2)
which(!is.finite(x / y))
# Ex8
x <- letters[1:10]
y <- letters[15:24]
x < y
# Ex9
x <- c("blue", "red", "green", "yellow")
is.character(x)
# Ex10
x <- c("blue", 10, "green", 20)
is.character(x)
# Ex3
a <- c(1, 5, 4, 3, 6)
b <- c(3, 5, 2, 1, 9)
a <= b
# Ex3
a <- c(1, 5, 4, 3, 6)
b <- c(3, 5, 2, 1, 9)
a <= b
# Ex4
a <- c(10, 2, 4, 15)
b <- c(3, 12, 4, 11)
rbind(a, b)
# Ex4
a <- c(10, 2, 4, 15)
b <- c(3, 12, 4, 11)
rbind(a, b)
# Ex5
x <- c(1:12)
dim(x)
length(x)
# Ex6
a <- c(12:5)
is.numeric(a)
# Ex7
x <- c(12:4)
y <- c(0, 1, 2, 0, 1, 2, 0, 1, 2)
which(!is.finite(x / y))
# Ex8
x <- letters[1:10]
y <- letters[15:24]
x < y
# Ex9
x <- c("blue", "red", "green", "yellow")
is.character(x)
# Ex10
x <- c("blue", 10, "green", 20)
# Ex10
x <- c("blue", 10, "green", 20)
is.character(x)
# Exercise 1
x <- 1:3
y <- 4:6
z <- 7:9
A <- cbind(x, y, z)
rownames(A) <- c("a", "b", "c")
A
# Exercise 1
x <- 1:3
y <- 4:6
z <- 7:9
A <- cbind(x, y, z)
rownames(A) <- c("a", "b", "c")
A
# Exercise 2
is.matrix(A)
# Exercise 2
is.matrix(A)
# Exercise 3
x <- 1:12
B <- matrix(x, nrow=4, ncol=3)
colnames(B) <- c("x", "y", "z")
rownames(B) <- c("a", "b", "c", "d")
B
B
# Exercise 3
x <- 1:12
B <- matrix(x, nrow = 4, ncol = 3)
colnames(B) <- c("x", "y", "z")
rownames(B) <- c("a", "b", "c", "d")
B
# Exercise 4
tB <- t(B)
# Exercise 5
# tB * tB is not matrix mul, but mul by each component
tB * tB
# Exercise 6
# to perform matrix mul, use %*% operator
A %*% tB
# Exercise 7
AA <- as.data.frame(A)
AA %*% AA
## Error in AA %*% AA : requires numeric/complex matrix/vector arguments
as.matrix(AA) %*% as.matrix(AA)
# Exercise 8
subB <- B[2:4,]
# Exercise 9
3 * A
##   x  y  z
## a 3 12 21
## b 6 15 24
## c 9 18 27
A + subB
##   x  y  z
## a 3 10 17
## b 5 12 19
## c 7 14 21
A - subB
##    x  y  z
## a -1 -2 -3
## b -1 -2 -3
## c -1 -2 -3
A + B
# Exercise 10
A1 <- matrix(sample(1:10, size = 16, replace = T),
nrow = 4,
ncol = 4)
A1
A2
##      [,1] [,2] [,3] [,4]
## [1,]    3   10    4    2
## [2,]    2    3   10    8
## [3,]    7    7    5    7
## [4,]    5    5    2    7
A2 <- matrix(sample(1:10, size = 20, replace = T),
nrow = 4,
ncol = 5)
A2
##      [,1] [,2] [,3] [,4] [,5]
## [1,]    6    2    3    1    6
## [2,]    9    1   10    6    3
## [3,]    4    7    8    6    5
## [4,]    6    7    2    6    8
M <- solve(A1, A2)
M
# Exercise 10
A1 <- matrix(sample(1:10, size = 16, replace = T),
nrow = 4,
ncol = 4)
A2 <- matrix(sample(1:10, size = 20, replace = T),
nrow = 4,
ncol = 5)
M <- solve(A1, A2)
# Exercise 1
x <- 1:3
y <- 4:6
z <- 7:9
A <- cbind(x, y, z)
rownames(A) <- c("a", "b", "c")
A
# Exercise 2
is.matrix(A)
# Exercise 3
x <- 1:12
B <- matrix(x, nrow = 4, ncol = 3)
colnames(B) <- c("x", "y", "z")
rownames(B) <- c("a", "b", "c", "d")
B
# Exercise 4
tB <- t(B)
tB
# Exercise 5
# tB * tB is not matrix mul, but mul by each component
tB * tB
# Exercise 6
# to perform matrix mul, use %*% operator
A %*% tB
# Exercise 7
AA <- as.data.frame(A)
AA %*% AA
## Error in AA %*% AA : requires numeric/complex matrix/vector arguments
as.matrix(AA) %*% as.matrix(AA)
# Exercise 8
subB <- B[2:4, ]
subB
# Exercise 9
3 * A
##   x  y  z
## a 3 12 21
## b 6 15 24
## c 9 18 27
A + subB
##   x  y  z
## a 3 10 17
## b 5 12 19
## c 7 14 21
A - subB
##    x  y  z
## a -1 -2 -3
## b -1 -2 -3
## c -1 -2 -3
A + B
# Exercise 10
A1 <- matrix(sample(1:10, size = 16, replace = T),
nrow = 4,
ncol = 4)
A2 <- matrix(sample(1:10, size = 20, replace = T),
nrow = 4,
ncol = 5)
M <- solve(A1, A2)
M
# Exercise 10
A1 <- matrix(sample(1:10, size = 16, replace = T),
nrow = 4,
ncol = 4)
A2 <- matrix(sample(1:10, size = 20, replace = T),
nrow = 4,
ncol = 5)
M <- solve(A1, A2)
M
# Exercise 10
A1 <- matrix(sample(1:10, size = 16, replace = T),
nrow = 4,
ncol = 4)
A2 <- matrix(sample(1:10, size = 20, replace = T),
nrow = 4,
ncol = 5)
M <- solve(A1, A2)
M
# Exercise 1
x <- 1:3
y <- 4:6
z <- 7:9
A <- cbind(x, y, z)
rownames(A) <- c("a", "b", "c")
A
# Exercise 2
is.matrix(A)
# Exercise 3
x <- 1:12
B <- matrix(x, nrow = 4, ncol = 3)
colnames(B) <- c("x", "y", "z")
rownames(B) <- c("a", "b", "c", "d")
B
# Exercise 4
tB <- t(B)
tB
# Exercise 5
# tB * tB is not matrix mul, but mul by each component
tB * tB
# Exercise 6
# to perform matrix mul, use %*% operator
A %*% tB
# Exercise 7
AA <- as.data.frame(A)
AA %*% AA
## Error in AA %*% AA : requires numeric/complex matrix/vector arguments
as.matrix(AA) %*% as.matrix(AA)
# Exercise 8
subB <- B[2:4, ]
subB
# Exercise 9
3 * A
##   x  y  z
## a 3 12 21
## b 6 15 24
## c 9 18 27
A + subB
##   x  y  z
## a 3 10 17
## b 5 12 19
## c 7 14 21
A - subB
##    x  y  z
## a -1 -2 -3
## b -1 -2 -3
## c -1 -2 -3
A + B
# Exercise 10
A1 <- matrix(sample(1:10, size = 16, replace = T),
nrow = 4,
ncol = 4)
A2 <- matrix(sample(1:10, size = 20, replace = T),
nrow = 4,
ncol = 5)
M <- solve(A1, A2)
M
q()
library(xgboost)
sessionInfo()
q()
q()
q()
install.packages("shiny")
update.packages()
library(xgboost)
?xgb.plot.tree
install.packages("DiagrammeR")
install.packages("DiagrammeR")
detach("package:xgboost", unload=TRUE)
q()
sessionInfo()
library(shiny)
setwd("~/Downloads/shiny_demo/")
runApp("1_rand_hist")
hist(rnorm(100))
hist(rnorm(10000))
hist(rnorm(100000))
?density
setwd("~/Downloads/shiny_demo")
shiny::runApp('2_faithful_hist')
runApp('2_faithful_hist')
runApp('2_faithful_hist')
runApp('2_faithful_hist')
runApp('2_faithful_hist')
runApp('2_faithful_hist')
q()
setwd("~/Downloads/shiny_demo/")
interaction()
?interactive
library(shiny)
?actionButton
if (interactive()) {
## App 1: Sample usage
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
}
)
}
runApp('3_reactive')
if (interactive()) {
## App 1: Sample usage
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
}
)
}
if (interactive()) {
## App 1: Sample usage
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
}, once = TRUE)
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
}
)
}
ui
runApp("3_reactive/")
runApp("3_reactive/", display.mode = "showcase")
runApp("3_reactive/", display.mode = "showcase", launch.browser = T)
q()
getMKLthreads()
q()
q()
getMKLthreads()
sessionInfo()
isMicrosoftRClient()
setwd("~/Downloads/shiny_demo/")
setwd("..")
q()
q()
update.packages()
update.packages()
q()
library(SRAdb)
sra_con <- dbConnect("SRAmetadb.sqlite")
sra_con <- dbConnect(SQLite(), "SRAmetadb.sqlite")
sra_con
dbListTables(sra_con)
dbListFields(sra_con, "col_desc")
dbListFields(sra_con, "metaInfo")
dbListFields(sra_con, "sample")
dbListFields(sra_con, "sra")
dbListFields(sra_con, "sra_ft")
dbListFields(sra_con, "study")
dbGetQuery(sra_con, 'PROGMA TABLE_INFO("study")')
dbGetQuery(sra_con, 'PRAGMA TABLE_INFO("study")')
?dbGetQuery
q()
q()
setwd("~/Downloads/primer_bias/scripts/")
data <- read.table("deg_result.tsv")
data
data[1, ]
data[, 2]
boxplot(data[, 2]
boxplot(data[, 2])
boxplot(data[, 2])
boxplot(data[, 2], ylim=c(0:32))
boxplot(data[, 2], ylim=32
)
boxplot(data[, 2], ylim=0:32)
boxplot(data[, 2])
boxplot(data[, 2], range = 1.4)
boxplot(data[, 2], range = 2)
hist(data[, 2])
hist(data[, 2], bin=10)
hist(data[, 2], breaks = 10)
hist(data[, 2], breaks = 100)
hist(data[, 2], breaks = 50)
hist(data[, 2], breaks = 100)
hist(data[, 2], breaks = 100, main = "Distobution of Deg")
hist(data[, 2], breaks = 100, main = "Distribution of Deg")
hist(data[, 2], breaks = 100, main = "Distribution of Deg.")
hist(data[, 2], breaks = 100, main = "Distribution of Deg.", xlab = "Degeneracy")
q()
